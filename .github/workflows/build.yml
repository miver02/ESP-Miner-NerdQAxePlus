name: Build and Release ESP32 Firmware

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - board: NERDQAXEPLUS
            upload_www: true
            label: NerdQAxe+
          - board: NERDOCTAXEPLUS
            upload_www: false
            label: NerdOCTAXE+
          - board: NERDQAXEPLUS2
            upload_www: false
            label: NerdQAxe++
          - board: NERDAXE
            upload_www: false
            label: NerdAxe
          - board: NERDOCTAXEGAMMA
            upload_www: false
            label: NerdOCTAXE-Gamma
          - board: NERDAXEGAMMA
            upload_www: false
            label: NerdAxeGamma
          - board: NERDHAXEGAMMA
            label: NerdHaxe-Gamma
            upload_www: false
          - board: NERDEKO
            upload_www: false
            label: NerdEKO

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get Version Tag
      id: version_tag
      run: |
        git fetch --tags  # Ensure all tags are fetched
        version=$(git describe --tags --abbrev=0 2>/dev/null || git rev-parse --short HEAD)
        echo "VERSION_TAG=${version}" >> $GITHUB_ENV
        echo "${version}" > version.txt
        echo "VERSION_TAG=${version}"

    - name: Set Target
      run: |
        # Run the Docker container to build the project
        docker run --rm --user root -e BOARD=${{ matrix.board }} -v $PWD:/home/builder/project \
        shufps/esp-idf-builder:0.0.1 idf.py set-target esp32s3

    - name: Compile Binaries
      run: |
        # Run the Docker container to build the project with BOARD environment variable
        docker run --rm --user root -e BOARD=${{ matrix.board }} -v $PWD:/home/builder/project \
        shufps/esp-idf-builder:0.0.1 idf.py build

    - name: Merge Binaries
      run: |
        docker run --rm --user root -v $PWD:/home/builder/project \
        shufps/esp-idf-builder:0.0.1 esptool.py --chip esp32s3 merge_bin --flash_mode dio --flash_size 16MB --flash_freq 80m \
        0x0 build/bootloader/bootloader.bin \
        0x8000 build/partition_table/partition-table.bin \
        0x10000 build/esp-miner.bin \
        0x410000 build/www.bin \
        0xf10000 build/ota_data_initial.bin \
        -o esp-miner-factory-${{ matrix.label }}-${{ env.VERSION_TAG }}.bin

    - name: Generate SHA-256 Sum of factory file
      run: |
        sha256sum esp-miner-factory-${{ matrix.label }}-${{ env.VERSION_TAG }}.bin > esp-miner-factory-${{ matrix.label }}-${{ env.VERSION_TAG }}.sha256

    - name: Upload SHA-256 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: esp-miner-factory-${{ matrix.label }}-${{ env.VERSION_TAG }}.sha256
        path: esp-miner-factory-${{ matrix.label }}-${{ env.VERSION_TAG }}.sha256

    - name: Rename Build Artifacts
      run: |
        sudo mv build/esp-miner.bin build/esp-miner-${{ matrix.label }}.bin

    - name: Create files list
      run: |
        echo "esp-miner-factory-${{ matrix.label }}-${{ env.VERSION_TAG }}.bin" > file_list.txt
        echo "build/esp-miner-${{ matrix.label }}.bin" >> file_list.txt
        if [ "${{ matrix.upload_www }}" == "true" ]; then
          echo "build/www.bin" >> file_list.txt
        fi

    - name: Set files variable
      id: set_files_var
      run: echo "files=$(cat file_list.txt | tr '\n' ',')" >> $GITHUB_ENV

    - name: Upload to Existing Release
      if: always()
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.files }}
        tag_name: ${{ env.VERSION_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-body:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get Version Tag
      id: version_tag
      run: |
        git fetch --tags  # Ensure all tags are fetched
        version=$(git describe --tags --abbrev=0 2>/dev/null || git rev-parse --short HEAD)
        echo "VERSION_TAG=${version}" >> $GITHUB_ENV
        echo "${version}" > version.txt
        echo "VERSION_TAG=${version}"

    - name: Download SHA-256 Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Combine SHA-256 Sums
      run: |
        files="$( find ./artifacts -name "*.sha256" | xargs )"
        cat $files | sort -k2 > sha256-summary.txt

    - name: Install GitHub CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y gh

    - name: Append to Release Body
      run: |
        # Fetch the current release body
        existing_notes="$(gh release view ${{ env.VERSION_TAG }} --json body -q '.body')"

        # Append the new content
        new_notes="$existing_notes\n"
        new_notes+='<!--\n'
        new_notes+="$(cat sha256-summary.txt)\n"
        new_notes+='-->\n'

        # Update the release body
        gh release edit ${{ env.VERSION_TAG }} --notes "$(echo -e "$new_notes")"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
